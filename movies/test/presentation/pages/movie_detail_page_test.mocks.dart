// Mocks generated by Mockito 5.0.15 from annotations
// in movies/test/presentation/pages/movie_detail_page_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:core/core.dart' as _i2;
import 'package:flutter_bloc/flutter_bloc.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/presentation/bloc/movie_detail_bloc.dart' as _i4;
import 'package:movies/presentation/bloc/movie_detail_recommendation_bloc.dart'
    as _i7;
import 'package:movies/presentation/bloc/movie_detail_watchlist_bloc.dart'
    as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDetailState_0 extends _i1.Fake implements _i2.DetailState {}

class _FakeStreamSubscription_1<T> extends _i1.Fake
    implements _i3.StreamSubscription<T> {}

class _FakeDetailWatchlistStatus_2 extends _i1.Fake
    implements _i2.DetailWatchlistStatus {}

class _FakeDetailRecommendationState_3 extends _i1.Fake
    implements _i2.DetailRecommendationState {}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i4.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DetailState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeDetailState_0()) as _i2.DetailState);
  @override
  _i3.Stream<_i2.DetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.DetailState>.empty())
          as _i3.Stream<_i2.DetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i3.Stream<_i2.DetailState> mapEventToState(_i2.DetailEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.DetailState>.empty())
          as _i3.Stream<_i2.DetailState>);
  @override
  void add(_i2.DetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.DetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.DetailEvent, _i2.DetailState>> transformEvents(
          _i3.Stream<_i2.DetailEvent>? events,
          _i5.TransitionFunction<_i2.DetailEvent, _i2.DetailState>?
              transitionFn) =>
      (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue: Stream<
                  _i5.Transition<_i2.DetailEvent, _i2.DetailState>>.empty())
          as _i3.Stream<_i5.Transition<_i2.DetailEvent, _i2.DetailState>>);
  @override
  void emit(_i2.DetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.DetailEvent>(
          _i5.EventHandler<E, _i2.DetailState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i5.Transition<_i2.DetailEvent, _i2.DetailState>? transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.DetailEvent, _i2.DetailState>>
      transformTransitions(
              _i3
                      .Stream<_i5.Transition<_i2.DetailEvent, _i2.DetailState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue: Stream<
                      _i5.Transition<_i2.DetailEvent, _i2.DetailState>>.empty())
              as _i3.Stream<_i5.Transition<_i2.DetailEvent, _i2.DetailState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.DetailState> listen(
          void Function(_i2.DetailState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue: _FakeStreamSubscription_1<_i2.DetailState>())
          as _i3.StreamSubscription<_i2.DetailState>);
  @override
  void onChange(_i5.Change<_i2.DetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieDetailWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailWatchlistBloc extends _i1.Mock
    implements _i6.MovieDetailWatchlistBloc {
  MockMovieDetailWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DetailWatchlistStatus get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeDetailWatchlistStatus_2())
          as _i2.DetailWatchlistStatus);
  @override
  _i3.Stream<_i2.DetailWatchlistStatus> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.DetailWatchlistStatus>.empty())
          as _i3.Stream<_i2.DetailWatchlistStatus>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i3.Stream<_i2.DetailWatchlistStatus> mapEventToState(
          _i2.DetailWatchlistEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.DetailWatchlistStatus>.empty())
          as _i3.Stream<_i2.DetailWatchlistStatus>);
  @override
  void add(_i2.DetailWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.DetailWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>
      transformEvents(
              _i3.Stream<_i2.DetailWatchlistEvent>? events,
              _i5.TransitionFunction<_i2.DetailWatchlistEvent,
                      _i2.DetailWatchlistStatus>?
                  transitionFn) =>
          (super.noSuchMethod(
              Invocation.method(#transformEvents, [events, transitionFn]),
              returnValue:
                  Stream<_i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>.empty()) as _i3
              .Stream<_i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>);
  @override
  void emit(_i2.DetailWatchlistStatus? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.DetailWatchlistEvent>(
          _i5.EventHandler<E, _i2.DetailWatchlistStatus>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.DetailWatchlistEvent, _i2.DetailWatchlistStatus>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.DetailWatchlistStatus> listen(
          void Function(_i2.DetailWatchlistStatus)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_1<_i2.DetailWatchlistStatus>())
          as _i3.StreamSubscription<_i2.DetailWatchlistStatus>);
  @override
  void onChange(_i5.Change<_i2.DetailWatchlistStatus>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MovieDetailRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailRecommendationBloc extends _i1.Mock
    implements _i7.MovieDetailRecommendationBloc {
  MockMovieDetailRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DetailRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeDetailRecommendationState_3())
          as _i2.DetailRecommendationState);
  @override
  _i3.Stream<_i2.DetailRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i2.DetailRecommendationState>.empty())
          as _i3.Stream<_i2.DetailRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  _i3.Stream<_i2.DetailRecommendationState> mapEventToState(
          _i2.DetailRecommendationEvent? event) =>
      (super.noSuchMethod(Invocation.method(#mapEventToState, [event]),
              returnValue: Stream<_i2.DetailRecommendationState>.empty())
          as _i3.Stream<_i2.DetailRecommendationState>);
  @override
  void add(_i2.DetailRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i2.DetailRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>
      transformEvents(
              _i3.Stream<_i2.DetailRecommendationEvent>? events,
              _i5.TransitionFunction<_i2.DetailRecommendationEvent,
                      _i2.DetailRecommendationState>?
                  transitionFn) =>
          (super.noSuchMethod(
                  Invocation.method(#transformEvents, [events, transitionFn]),
                  returnValue:
                      Stream<_i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>.empty())
              as _i3.Stream<_i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>);
  @override
  void emit(_i2.DetailRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i2.DetailRecommendationEvent>(
          _i5.EventHandler<E, _i2.DetailRecommendationState>? handler,
          {_i5.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i5.Transition<_i2.DetailRecommendationEvent,
                  _i2.DetailRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i3.Stream<_i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>
      transformTransitions(
              _i3.Stream<_i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>?
                  transitions) =>
          (super.noSuchMethod(
                  Invocation.method(#transformTransitions, [transitions]),
                  returnValue:
                      Stream<_i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>.empty())
              as _i3.Stream<
                  _i5.Transition<_i2.DetailRecommendationEvent, _i2.DetailRecommendationState>>);
  @override
  _i3.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.StreamSubscription<_i2.DetailRecommendationState> listen(
          void Function(_i2.DetailRecommendationState)? onData,
          {Function? onError,
          void Function()? onDone,
          bool? cancelOnError}) =>
      (super.noSuchMethod(
              Invocation.method(#listen, [
                onData
              ], {
                #onError: onError,
                #onDone: onDone,
                #cancelOnError: cancelOnError
              }),
              returnValue:
                  _FakeStreamSubscription_1<_i2.DetailRecommendationState>())
          as _i3.StreamSubscription<_i2.DetailRecommendationState>);
  @override
  void onChange(_i5.Change<_i2.DetailRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
